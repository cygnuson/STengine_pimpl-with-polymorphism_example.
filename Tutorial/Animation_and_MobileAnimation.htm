<!DOCTYPE html>
<html>
<head>
<link rel="stylesheet" href="http://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.4.0/styles/monokai-sublime.min.css">
<link rel="stylesheet" type="text/css" href="styles.css">
<script src="http://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.4.0/highlight.min.js"></script>
<script>hljs.initHighlightingOnLoad();</script>
</head>
<body>
<div>
The Animation calss is for a single animation for a single direction or set.
The MobileAnimation class is just a map of Animation objects for multiple directions,
determined by the developer.
</div>
<pre><code class="cpp">
/*Animation. Remember that the textures name is the name of the resource in the 
texture manager.*/
Animation _staticAnimNorth("some texture", { 32,32 }, 10.f, { 1,2 }, { 3,1 })
                          //^texture name   ^tilesize  ^fps  ^start   ^span
</code></pre>	
<div>		
The `texture name` is the name of the texture in the texture manager.<br>
The `tilesize` is the size of each tile in pixel. There are not ratio restrictions.<br>
	64x32 would work as well as 3x99 or any weird thing a developer could think of.
the `FPS` is the rate that the animation plays.<br>
`start` is the position on the texture to start using. (zero indexed).<br>
`span` is the length in tiles to use.<br>

For example, the above instansiation would create a static animation that uses
`some texture` from the texture manager, and is 32px by 32px per tile with 10 frames
played per second.  the animations first tile will be second from the left edge,
and theird from the top. (1,2) with zero as the first.  The animation will include
the following because of the span: (1,2) , (2,2) , (3,2) , (1,3), (2,3), and (3,3).

A span of 0,0 will use the all the tile to the right and below.

A span of (1,1) will use only a single tile that is the starting tile.
</div>
<pre><code class="cpp">
/*MobileAnimation*/

enum Direction
{
	Up = 1,
	Down,
	Right,
	Left
}
MobileAnimation _test;

_test.SetDirectionAnimation(Direction::Down,
	Animation (tex, { 32,32 }, 10.f, { 0,0 }, { 3,1 }));
_test.SetDirectionAnimation(Direction::Up,
	Animation (tex, { 32,32 }, 10.f, { 0,3 }, { 3,1 }));
_test.SetDirectionAnimation(Direction::Left,
	Animation (tex, { 32,32 }, 10.f, { 0,1 }, { 3,1 }));
_test.SetDirectionAnimation(Direction::Right,
	Animation (tex, { 32,32 }, 10.f, { 0,2 }, { 3,1 }));

_test.SetStillFrameIndex(1); /*Will be the from for non-moving state.*/

</code></pre>
<div>
The above code will use a sprite sheet that has 4 directions on it, and is 
4 rows and 3 columns of tiles.  The sheet is loaded once by the texture manager
and the sprites are created with sections of the one sheet.

See below for a full example of a test state that used the example. The texture used
is ship_texture_trans.png. Its not made by myself, its from bbaallppeenn on deviant art.
<br>
<img src="ship_texture_trans.png">
</div>
<pre><code class="cpp">
class TestState : public InputMatrix
{
public:
	enum Direction : uint64_t
	{
		Up = 1,
		Down,
		Left,
		Right,
	};
	TestState(const std::string& tex)
	{
		/*Create the mobile animation.*/
		_test.SetDirectionAnimation(Direction::Down,
			Animation (tex, { 32,32 }, 10.f, { 0,0 }, { 3,1 }));
		_test.SetDirectionAnimation(Direction::Up,
			Animation (tex, { 32,32 }, 10.f, { 0,3 }, { 3,1 }));
		_test.SetDirectionAnimation(Direction::Left,
			Animation (tex, { 32,32 }, 10.f, { 0,1 }, { 3,1 }));
		_test.SetDirectionAnimation(Direction::Right,
			Animation (tex, { 32,32 }, 10.f, { 0,2 }, { 3,1 }));
		/*Set the starting direction.*/
		_direction = Direction::Up;
		/*The middle frame (1) will be the one to use when not moving.*/
		_test.SetStillFrameIndex(1);
		/*Move the view so that we can see the ship*/
		_view.move(-300, -300);
		/*start out not moving.*/
		_moving = false;
		/*ignore invalid input for now.*/
		IgnoreBadInput(true);
	}
	virtual ~TestState()
	{

	}
	void Freeze()
	{
		/*clear all the keys when a new state is overlayed.*/
		InputMatrix::ClearAll();
	}
	void Unfreeze()
	{

	}
	bool Draw(sf::RenderWindow& win, sf::Time dt)
	{
		win.setView(_view);
		/*when the mobile object is not moving, we draw a still image.*/
		_test.Draw(win,_direction,!_moving);
		return true;
	}
	bool SanityCheck() {
		return true;
	}
	bool UpdateLogic(sf::Time dt)
	{
		if (IsPressed(sf::Keyboard::Up))
		{
			/*show left and right directions when moving diagonal.*/
			if (!IsPressed(sf::Keyboard::Left) 
				&& !IsPressed(sf::Keyboard::Right))
			{
				/*set the direction*/
				_direction = Direction::Up;
			}
			_test.Move({ 0, -100 * dt.asSeconds() });
			/*Dont forget to toggle the movment.*/
			_moving = true;
		}
		else if (IsPressed(sf::Keyboard::Down))
		{
			/*show left and right directions when moving diagonal.*/
			if (!IsPressed(sf::Keyboard::Left)
				&& !IsPressed(sf::Keyboard::Right))
			{
				/*set the direction*/
				_direction = Direction::Down;
			}
			_test.Move({0, 100 * dt.asSeconds() });
			/*Dont forget to toggle the movment.*/
			_moving = true;
		}
		if (IsPressed(sf::Keyboard::Left))
		{
			/*set the direction*/
			_direction = Direction::Left;
			_test.Move({ -100 * dt.asSeconds(), 0});
			/*Dont forget to toggle the movment.*/
			_moving = true;
		}
		else if (IsPressed(sf::Keyboard::Right))
		{
			/*set the direction*/
			_direction = Direction::Right;
			_test.Move({ 100 * dt.asSeconds(), 0 });
			/*Dont forget to toggle the movment.*/
			_moving = true;
		}
		/*If we are still considered moving, we want to check and see if we 
		have stopped moving yet.*/
		if(_moving
			&& !IsPressed(sf::Keyboard::Right)
			&& !IsPressed(sf::Keyboard::Left)
			&& !IsPressed(sf::Keyboard::Down)
			&& !IsPressed(sf::Keyboard::Right))
		{
			_moving = false;
		}
		return true;
	}
	void Resize(sf::Event& ev)
	{
		_view.setSize(float(ev.size.width), float(ev.size.height));
	}
	State::Flag HandleInput(sf::Event& ev, sf::Time dt)
	{
		if (ev.type == sf::Event::Closed)
		{
			return State::Flag::Exit;
		}
		if (ev.type == sf::Event::Resized)
		{
			Resize(ev);
			return State::Flag::None;
		}
		
		ProcessEvent(ev);
		return State::Flag::None;
	}
	std::shared_ptr&lt;State&gt; GetState()
	{
		return _stateInQuestion;
	}
	sf::View& GetView()
	{
		return _view;
	}
	MobileAnimation        _test;
	Direction              _direction;
	sf::View               _view;
	std::shared_ptr&lt;State&gt; _stateInQuestion;
	bool                   _moving;
};
</code></pre>
<div>
See the included dexygen docs for more information.  Also make sure to check
the other tutorials for more examples.
</div>
</body>
</html>


